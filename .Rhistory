curve(dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
curve(dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
sum(x)
a=sum(x)
curve(a*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/2*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/10*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
breaks
bins
curve(a/6*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = 15)
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
m=mean(x)
s=sd(x)
curve(a/length(bins)*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/(length(bins)-1)*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
save(miniBase,file="./data/miniBase.RData")
shiny::runApp()
miniBase
miniBase
head(miniBase)
save(miniBase,file="./data/miniBase.RData")
runApp()
miniBase
levels(miniBase$Edad)
class(miniBase$Edad)
miniBase$Edad
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
save(miniBase,file="./data/miniBase.RData")
runApp()
library(foreign)
library(dplyr)
library(haven)
library(lubridate)
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
library(ggplot2)
library(dplyr)
music = read.csv(file = "Mehr Song and Spelke 2016 Experiment 1.csv")
music = read.csv(file = "../data/musicBabies/Mehr Song and Spelke 2016 Experiment 1.csv")
View(music)
View(music1)
music = read.csv(file = "../data/musicBabies/Mehr Song and Spelke 2016 Experiment 1.csv")
View(music)
music1 = music %>%
filter(exp1==1) %>%
select("id","female","dad","Baseline_Proportion_Gaze_to_Singer","Test_Proportion_Gaze_to_Singer","Difference_in_Proportion_Looking","age","Estimated_Total_Number_of_Song")
View(music1)
colnames(music1)
library(haven)
?haven
??haven
attributes(music1$Baseline_Proportion_Gaze_to_Singer)
attributes(music1$Baseline_Proportion_Gaze_to_Singer)$label
attributes(music1$Baseline_Proportion_Gaze_to_Singer)$label = "d"
attributes(music1$Baseline_Proportion_Gaze_to_Singer)$label
music1$Baseline_Proportion_Gaze_to_Singer
colnames(music1) = c("Id","Mujer","Vino.con.el.padre","Prop.Mirada.Canta.Base","Prop.Mirada.Canta.Test","Dif.Prop.Mirada","edad","Num.canc.estim")
attributes(music1[1])
attributes(music1[1])$label
attributes(music1[1])$label = "Identificador del bebé"
attributes(music1[2])$label = "Es mujer?  Sí:1  No:0"
attributes(music1[3])$label = "¿Vino con el padre? Sí:1  No:0"
attributes(music1[4])$label = "Proporción de tiempo que mira a quien (luego) canta la canción conocida. Línea de base"
attributes(music1[5])$label = "Proporción de tiempo que mira a quien canta la canción conocida. Test."
attributes(music1[6])$label = "Diferencia en la proporción de tiempo que mira a quien canta la canción conocida, Test menos línea de base."
attributes(music1[7])$label = "Edad en meses"
attributes(music1[8])$label = "Número estimado de veces que el bebé escuchó la canción de parte de sus cuidadores."
save(music1,file="./data/expeCuna.RData")
load("./data/expeCuna.RData")
shiny::runApp()
music1
attributes(music1$Mujer)$label
attributes(music1$Mujer)$label
attributes(music1[1])$label = "Identificador del bebé"
attributes(music1[1])$label
attributes(music1$Id)$label
attributes(music1$Id)$label = "id"
attributes(music1$Id)$label
attributes(music1$Id)$label = "Identificador del bebé"
attributes(music1$Mujer)$label = "Es mujer?  Sí:1  No:0"
attributes(music1$Vino.con.el.padre)$label = "¿Vino con el padre? Sí:1  No:0"
attributes(music1$Prop.Mirada.Canta.Base)$label = "Proporción de tiempo que mira a quien (luego) canta la canción conocida. Línea de base"
attributes(music1$Prop.Mirada.Canta.Test)$label = "Proporción de tiempo que mira a quien canta la canción conocida. Test."
attributes(music1$Dif.Prop.Mirada)$label = "Diferencia en la proporción de tiempo que mira a quien canta la canción conocida, Test menos línea de base."
attributes(music1$edad)$label = "Edad en meses"
attributes(music1$Num.canc.estim)$label = "Número estimado de veces que el bebé escuchó la canción de parte de sus cuidadores."
save(music1,file="./data/expeCuna.RData")
runApp()
music1$Mujer
music1$Mujer = as.factor(music1$Mujer)
levels(music1$Mujer)
music1$Mujer = as.factor(music1$Mujer,label=c("No","Si"))
music = read.csv(file = "../data/musicBabies/Mehr Song and Spelke 2016 Experiment 1.csv")
music1 = music %>%
filter(exp1==1) %>%
select("id","female","dad","Baseline_Proportion_Gaze_to_Singer","Test_Proportion_Gaze_to_Singer","Difference_in_Proportion_Looking","age","Estimated_Total_Number_of_Song")
colnames(music1)
colnames(music1) = c("Id","Mujer","Vino.con.el.padre","Prop.Mirada.Canta.Base","Prop.Mirada.Canta.Test","Dif.Prop.Mirada","edad","Num.canc.estim")
attributes(music1$Id)$label = "Identificador del bebé"
attributes(music1$Mujer)$label = "Es mujer?"
attributes(music1$Vino.con.el.padre)$label = "¿Vino con el padre?"
attributes(music1$Prop.Mirada.Canta.Base)$label = "Proporción de tiempo que mira a quien (luego) canta la canción conocida. Línea de base"
attributes(music1$Prop.Mirada.Canta.Test)$label = "Proporción de tiempo que mira a quien canta la canción conocida. Test."
attributes(music1$Dif.Prop.Mirada)$label = "Diferencia en la proporción de tiempo que mira a quien canta la canción conocida, Test menos línea de base."
attributes(music1$edad)$label = "Edad en meses"
attributes(music1$Num.canc.estim)$label = "Número estimado de veces que el bebé escuchó la canción de parte de sus cuidadores."
music1$Mujer = factor(music1$Mujer,labels = c("No","Si"))
View(music)
colnames(music1) = c("Id","Es.mujer","Vino.con.el.padre","Prop.Mirada.Canta.Base","Prop.Mirada.Canta.Test","Dif.Prop.Mirada","edad","Num.canc.estim")
factor(music1$Vino.con.el.padre,labels = c("No","Si"))
music1$Vino.con.el.padre =  factor(music1$Vino.con.el.padre,labels = c("No","Si"))
save(music1,file="./data/expeCuna.RData")
runApp()
?Tag
?tag
cor(x,y)
cor(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3
)
paste("a",cor(dt$Veces_entra_FBIG_XDIA,dt$Narcicismo_SD3))
cor.test(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3
)
a=cor.test(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3)
a$p.value
cor.test(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3)$p.value
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("El p-valor de la prueba de hipótesis (nula r=0) es : ",round(cor.test(dt$Veces_entra_FBIG_XDIA,dt$Psicopatia_SD3)$p.value,4))
runApp()
runApp()
runApp()
boxplot(dt$Maquiavelismo_SD3,main=paste("Diagrama de caja de"))
abline(h=mean(dt$Maquiavelismo_SD3))
boxplot(dt$Maquiavelismo_SD3,dt$Psicopatia_SD3,main=paste("Diagrama de caja de"))
abline(h=mean(dt$Maquiavelismo_SD3))
?abline
boxplot(dt$Maquiavelismo_SD3,dt$Psicopatia_SD3,main=paste("Diagrama de caja de"))
abline(h=mean(dt$Maquiavelismo_SD3),v=1)
boxplot(dt$Maquiavelismo_SD3,dt$Psicopatia_SD3,main=paste("Diagrama de caja de"))
segments(1,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3))
segments(1,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3),col="red")
segments(.5,mean(dt$Maquiavelismo_SD3),1.5,mean(dt$Maquiavelismo_SD3),col="red")
segments(.7,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3),col="red")
segments(.7,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3),col="blue")
segments(.6,mean(dt$Maquiavelismo_SD3),1.4,mean(dt$Maquiavelismo_SD3),col="blue")
?tapply
mxy = tapply(dt$Narcicismo_SD3,dt$Sexo,function(x) mean(x,na.rm = T))
mx
mxy
boxplot(Narcicismo_SD3~Sexo,data=dt,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
boxplot(Narcicismo_SD3~Sexo,data=dt,main="Diagrama de caja")
points(mxy,col="red")
segments(mxy,col="red")
s=seq(length(Sexo)-1)
s=seq(length(dt$Sexo)-1)
s
s
s=seq(1:2)
s
mxy
mxy[s]
x
xcoords=x
xcoords=s
xcoords=s-0.4
xcoords1=s+.6
xcoords
s=2
xcoords=s-.4
xcoords1=s+.4
xcoords
xords1
xcoords
s
s=1:2
s
s=1:2
xcoords=s-.4
xcoords
xccoords1=s+.4
xcoords1
xcooords1
xccoords1
mxy
segments(xcoords,xccoords1,mxy)
segments(xcoords,xccoords1,mxy,col="red")
xcoords1
xccoords1
boxplot(Narcicismo_SD3~Sexo,data=dt,main="Diagrama de caja")
segments(xcoords,xccoords1,mxy,col="red")
mxy
segments
?segments
s
segments(xcoords[s],mxy[s],xccoords1[s],mxy[s],col="red")
segments(xcoords[s],mxy[s],xccoords1[s],mxy[s],col="red",lwd=2)
runApp()
shiny::runApp()
wealth = read.csv("../data/wealth/Dawtry Sutton and Sibley 2015 Study 1a.csv")
head(wealth)
hist(wealth$Social_Circle_Mean_Income)
plot(wealth$Social_Circle_Mean_Income,wealth$Political_Preference)
plot(wealth$Social_Circle_Mean_Income,wealth$Population_Mean_Income)
plot(wealth$Social_Circle_Mean_Income,wealth$Population_Inequality_Gini_Index)
plot(wealth$Social_Circle_Inequality_Gini_Index,wealth$Population_Inequality_Gini_Index)
cor(wealth$Social_Circle_Inequality_Gini_Index,wealth$Population_Inequality_Gini_Index)
cor.test(wealth$Social_Circle_Inequality_Gini_Index,wealth$Population_Inequality_Gini_Index)
wealth$fairness
wealth$satisfaction
mean(wealth$satisfaction,wealth$fairness)
applyl(wealth[,c("fairness","satisfaction")],1,mean)
apply(wealth[,c("fairness","satisfaction")],1,mean)
wealth$f_s=apply(wealth[,c("fairness","satisfaction")],1,mean)
head(wealth)
wealth$redist2
wealth$redist2_r = 7 - wealth$redist2
wealth$redist4_r = 7 - wealth$redist4
apply(wealth[,c("redist1","redist2_r","redist3","redist4_r")],1,mean)
wealth$redist=apply(wealth[,c("redist1","redist2_r","redist3","redist4_r")],1,mean)
plot(wealth$Social_Circle_Mean_Income,wealth$redist)
cor.test(wealth$Social_Circle_Mean_Income,wealth$redist)
cor.test(wealth$Social_Circle_Mean_Income,wealth$Social_Circle_Inequality_Gini_Index)
cor.test(wealth$redist,wealth$Social_Circle_Inequality_Gini_Index)
cor.test(wealth$redist,wealth$f_s)
plot(wealth$redist,wealth$f_s)
library(foreign)
shiny::runApp()
View(wealth)
plot(wealth$Social_Circle_Mean_Income,wealth$redist)
cor.test(wealth$Social_Circle_Mean_Income,wealth$redist)
cor.test(wealth$redist,wealth$f_s)
plot(wealth$redist,wealth$f_s)
plot(wealth$f_s,wealth$redist)
abline(wealth$redist~wealth$f_s)
abline(lm(wealth$redist~wealth$f_s))
wealth[,c(2,12)]
wealth[,c(2:12)]
plot(wealth$Social_Circle_Mean_Income,wealth$redist)
cor.test(wealth$Social_Circle_Mean_Income,wealth$redist)
cor.test(wealth$redist,wealth$f_s)
plot(wealth$redist,wealth$f_s)
plot(wealth$f_s,wealth$redist)
abline(lm(wealth$redist~wealth$f_s))
plot(wealth$f_s,wealth$Household_Income)
cor.test(wealth$Household_Income,wealth$f_s)
abline(lm(wealth$Household_Income~wealth$f_s))
plot(wealth$redist,wealth$Household_Income)
cor.test(wealth$Household_Income,wealth$redist)
abline(lm(wealth$Household_Income~wealth$redist))
hist(wealth$Political_Preference)
hist(wealth$Household_Income)
cor(wealth$Household_Income,wealth$Political_Preference)
cor(wealth$Household_Income,wealth$Political_Preference,use use = "pairwise.complete.obs")
cor(wealth$Household_Income,wealth$Political_Preference,use = "pairwise.complete.obs")
cor.test(wealth$Household_Income,wealth$Political_Preference,use = "pairwise.complete.obs")
ntile(wealth$Household_Income,3)
mutate(wealth,income3tile = ntile(Household_Income,3))
wealth2 = mutate(wealth,income3tile = ntile(Household_Income,3))
bar(wealth2$redist,wealth2$income3tile)
barplot(wealth2$redist~wealth2$income3tile)
barplot(wealth2$redist~wealth2$income3tile)
boxplot(wealth2$redist~wealth2$income3tile)
wealth2$PD_15
wealth2$Political_Preference
wealth2 = mutate(wealth2,political3tile = ntile(Political_Preference,3))
table(wealth2$political3tile,wealth2$income3tile)
chisq.test(wealth2$political3tile,wealth2$income3tile)
colnames(wealth2)
wealth2 %>%
select("PS","Household_Income","Population_Inequality_Gini_Index","Social_Circle_Inequality_Gini_Index","f_s","redist","income3tile","political3tile")
wealth3 = wealth2 %>%
select("PS","Household_Income","Population_Inequality_Gini_Index","Social_Circle_Inequality_Gini_Index","f_s","redist","income3tile","political3tile")
colnames(wealth3)
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Tercil_actitud_politica")
wealth3$Tercil_ingreso_hogar
wealth3$Tercil_ingreso_hogar = factor(wealth3$Tercil_ingreso_hogar,labels=c("Menor","Medio","Mayor"))
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Tercil_orientacion_politica")
boxplot(wealth2$redist~wealth2$income3tile)
boxplot(wealth2$f_s~wealth2$income3tile)
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Orientacion_politica")
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
save(wealth3,file="./data/wealth.RData")
runApp()
inteli = read_sav("../data/inteligencia/alldata/Study1 data.sav")
runApp()
runApp()
wealth3=complete.cases(wealth3)
save(wealth3,file="./data/wealth.RData")
runApp()
runApp()
wealth3
wealth3 = wealth2 %>%
select("PS","Household_Income","Population_Inequality_Gini_Index","Social_Circle_Inequality_Gini_Index","f_s","redist","income3tile","political3tile")
colnames(wealth3)
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Orientacion_politica")
wealth3$Tercil_ingreso_hogar = factor(wealth3$Tercil_ingreso_hogar,labels=c("Menor","Medio","Mayor"))
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
wealth3=wealth3[complete.cases(wealth3),]
save(wealth3,file="./data/wealth.RData")
runApp()
shiny::runApp()
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
wealth3$Tercil_orientacion_politica
colnames(wealth2)
wealth3 = wealth2 %>%
select("PS","Household_Income","Population_Inequality_Gini_Index","Social_Circle_Inequality_Gini_Index","f_s","redist","income3tile","political3tile")
colnames(wealth3)
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Orientacion_politica")
wealth3$Tercil_ingreso_hogar = factor(wealth3$Tercil_ingreso_hogar,labels=c("Menor","Medio","Mayor"))
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
wealth3$Orientacion_politica
wealth3$Tercil_ingreso_hogar
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
wealth3$Tercil_orientacion_politica
wealth3$Tercil_ingreso_hogar
wealth3$Tercil_orientacion_politica
wealth3$Orientacion_politica = factor(wealth3$Orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
wealth3=wealth3[complete.cases(wealth3),]
save(wealth3,file="./data/wealth.RData")
runApp()
chisq(dt$Sexo,dt$Lugar_procedencia)
chisq.test(dt$Sexo,dt$Lugar_procedencia)
a=chisq.test(dt$Sexo,dt$Lugar_procedencia)
a$statistic
a$p.value
a$parameter
runApp()
runApp()
runApp()
runApp()
t.test(dt$Veces_entra_FBIG_XDIA)
t.test(dt$Veces_entra_FBIG_XDIA,dt$Narcicismo_SD3)
t.test(dt$Veces_entra_FBIG_XDIA~dt$Sexo)
a
a[[1]]
a=1
a[[1]]
a
a=t.test(dt$Veces_entra_FBIG_XDIA~dt$Sexo)
a
a$statistic
ifelse(T,"","DF")
ifelse(F,"","DF")
ifelse(F,"DF")
ifelse(F,"","DF")
runApp()
runApp()
70/69
70/69*3.34
69/70*3.34
sqrt(69/70)*3.34
70/69*3.34
sqrt(69/70)*1.83
70/69*1.83
dt$Veces_entra_FBIG_XDIA
sdd=sd(dt$Veces_entra_FBIG_XDIA)
sdd
sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))
plotci
plot(mean(dt$Veces_entra_FBIG_XDIA))
segments(x0 = 1,x1 = 1, y0=mean(dt$Veces_entra_FBIG_XDIA-sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),y0=mean(dt$Veces_entra_FBIG_XDIA+sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))))
segments(x0 = 1,x1 = 1, y0=mean(dt$Veces_entra_FBIG_XDIA-sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),y1=mean(dt$Veces_entra_FBIG_XDIA+sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))))
segments(x0 = 1,x1 = 1, y0=mean(dt$Veces_entra_FBIG_XDIA-sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),y1=mean(dt$Veces_entra_FBIG_XDIA+sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),"red")
shiny::runApp()
runApp()
runApp()
x=dt$Veces_entra_FBIG_XDIA
mx=mean(x,na.rm=T)
sdx = sd(x,na.rm = T)
sex = sdx/sqrt(length(x))
print(sex)
nombre=""
plot(mx,main=paste("Intervalo de confianza de 68% para la media de",nombre))
segments(x0=1,y0=mx-multiplicador*sex,x1=1,y1=1+multiplicador*sex,col="red")
multiplicador=1
segments(x0=1,y0=mx-multiplicador*sex,x1=1,y1=1+multiplicador*sex,col="red")
mx
mx-sex
mx-multiplicador*sex
segments(x0=1,y0=mx-multiplicador*sex,x1=1,y1=1+multiplicador*sex,col="red")
(mx-multiplicador*sex)
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=1+multiplicador*sex,col="red")
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=(1+multiplicador*sex),col="red")
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=(mx+multiplicador*sex),col="red")
runApp()
y=dt$Narcicismo_SD3
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
mxy
y=dt$Sexo
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
mxy
sexy = tapply(x,y,function(x) sd(x,na.rm = T)/sqrt(length(x)))
sexy
plot(c(mx,my))
my=mean(y)
my=mean(y,na.rm = T)
my
y
y=dt$Maquiavelismo_SD3
my=mean(y,na.rm = T)
my
plot(c(mx,my))
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=(mx+multiplicador*sex),col="red")
segments(x0=2,y0=(my-multiplicador*sey),x1=2,y1=(my+multiplicador*sey),col="red")
sdy = sd(y,na.rm = T)
sey = sdy/sqrt(length(y))
segments(x0=2,y0=(my-multiplicador*sey),x1=2,y1=(my+multiplicador*sey),col="red")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
y
y=dt$Sexo
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
sexy = tapply(x,y,function(x) sd(x,na.rm = T)/sqrt(length(x)))
mxy
sexy
ycoords0 = mxy - multiplicador*sexy
ycoords1 = mxy + multiplicador*sexy
ycoords0
ycoords1
s
xcoords=1:length(unique(y))
scoords
xcoords
uppery
lowery = min(mxy-2*multiplicador*sexy)
uppery = max(mxy+2*multiplicador*sexy)
uppery
lowery
xcoords
s
xcoords
s
xcoords[s]
mxy[s]
ycoords0
shiny::runApp()
1:s
s
runApp()
runApp()
runApp()
