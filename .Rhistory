)
## App 2: Using `once`
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
}
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
runApp()
runApp()
runApp()
runApp()
1:4-3
pairwise.t.test(dt$Narcicismo_SD3,dt$Sexo)
pairwise.t.test(dt$Narcicismo_SD3,dt$Lugar_procedencia)
a=pairwise.t.test(dt$Narcicismo_SD3,dt$Lugar_procedencia)
a$p.value
a$method
a$data.name
a$p.adjust.method
a=pairwise.t.test(dt$Narcicismo_SD3,dt$Lugar_procedencia,adjust="none")
a
a$data.name
labels(a$p.value)
levels(dt$Lugar_procedencia)
a
levels(dt$Lugar_procedencia)
a
a[1,1]
a[1]
a
a$p.value[1]
a$p.value[1,]
a$p.value[1,1]
a$p.value[1,2]
a$p.value[2,1]
runApp()
x
y
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i+1):(niveles)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
niveles
niveles=length(unique(y))
niveles
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i+1):(niveles)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
j
i
a
niveles=length(unique(y))
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i+1):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
j
i
runApp()
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
texto
niveles
etiquetas=unique(y)
etiquetas
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
texto
i
j
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
texto
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,etiquetas[i]," --",etiquetas[j],":",a[j,i],"\n")
}
}
texgto
texto
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
etiquetqas
i=1
y
y=dt$Lugar_procedencia
niveles=length(unique(y))
etiquetas=unique(y)
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
i=1
j=1
a[j,i]
a
a=pairwise.t.test(x,y)$p.value
a
a[j,i]
a
etiquetas
etiquetas=levels(as.factor(y))
etiquetqas
etiquetas
runApp()
runApp()
runApp()
runApp()
y
x
x=dt$Maquiavelismo_SD3
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja")
nombre1="Maquiavelismo_SD3"
nombre2="Sexo"
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja")
meanOffset = .45
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(,main="Diagrama de caja")
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(x~y,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
nombre1="Maquiavelismo"
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(x~y,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
segments(xcoords[s],mxy[s],xcoords1[s],mxy[s],col="red",lwd=2,lty=2)
mtext("La líneas cortadas indican la media",1)
mtext("La líneas cortadas indican la media",1)
meanOffset = .5
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(x~y,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
segments(xcoords[s],mxy[s],xcoords1[s],mxy[s],col="red",lwd=2,lty=2)
mtext("La líneas cortadas indican la media",1)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?binomial
plot(dbinom)
dbinom(10)
dbinom(size=10)
n=10
p=.5
x=1:n
valores = pbinom(x,size=n,prob = p)
valore
valores
plot(x,valores)
valores = dbinom(x,size=n,prob = p)
plot(x,valores)
x=0:n
valores = dbinom(x,size=n,prob = p)
plot(x,valores)
?Bar
?bar
?barplot
barplot(x,valores)
barplot(valores,x)
?barplot
barplot(valores)
axis(side=1,at=x,labels=1:n)
axis(side=1,at=x,labels=x)
x
axis(side=1,at=1+x,labels=x)
barplot(valores)
axis(side=1,at=1+x,labels=x)
barplot(valores,names.arg = x)
barplot(valores,names.arg = x,ylim = 0,max(valores))
barplot(valores,names.arg = x,ylim = c(0,max(valores)))
max(valores)
barplot(valores,names.arg = x,ylim = c(0,.5+max(valores)))
barplot(valores,names.arg = x,ylim = c(0,1.5*max(valores)))
barplot(valores,names.arg = x,ylim = c(0,1.3*max(valores)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
updateVaribleInputs
?updateVaribleInputs
?updateSliderInput
runApp()
table(x,valores)
(x,valores)
c(x,valores)
x
htmlTable(x,valores)
htmlTable(valores,x)
?htmlTable
htmlTable(valores,x,ncol=2)
htmlTable(valores)
htmlTable(valores,ncol=1)
rbind(ncol,valores)
rbind(x,valores)
cbind(x,valores)
htmlTable(cbind(x,valores)=
htmlTable(cbind(x,valores))
htmlTable(cbind(x,round(valores,3)))
htmlTable(cbind(x,round(valores,3)),dimnames=list("",c("k","probabilidad"))
)
htmlTable(cbind(x,round(valores,3)),dimnames=list("",c("k","probabilidad")) )
htmlTable(cbind(x,round(valores,3)),dimnames=list(c(),c("k","probabilidad")) )
htmlTable(cbind(x,round(valores,3)),dimnames=list( ) )
runApp()
runApp()
runApp()
runApp()
runApp()
n=50
k=0:n
probabilidades = round(dbinom(x,size=n,prob = p),3)
k
probabilidades
k
n
k
n
probabilidades = round(dbinom(x,size=n,prob = p),3)
probabilidades
probabilidades = round(dbinom(k,size=n,prob = p),3)
probabilidades
runApp()
runApp()
?barplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dt(50)
dt(x,50)
curve(dt(x,50))
rm(d)
curve(dt(x,50))
curve(dt(x, 30), from = -5, to = 5, col = "orange",
xlab = "quantile", ylab = "density", lwd = 2)
x
x=seq(-5,5,length=100)
valores = dt(x,gl)
gl=20
x=seq(-5,5,length=100)
valores = dt(x,gl)
plot(x,valores)
plot(x,valores,lw=2)
curve(x,valores,lw=2)
curve(x,valores,lwd=2)
curve(x,valores,lwd=2)
plot(x,valores,lwd=2)
plot(x,valores,lwd=2,type = "line")
plot(x,valores,lwd=2,type = "l")
plot(x,valores,lwd=2,type = "l")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x=seq(-5,5,length=100)
valores = dt(x,gl)
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.4))
t_1 = t
big_t = -t
t
t=2.4
t_1 = -t
big_t = t
t_1
index_low_t = x<=t_1
index_high_t = x>=big_t
alphaValues[! (index_low_t | index_high_t)] = 0
alphaValues = valores
alphaValues[! (index_low_t | index_high_t)] = 0
alphaValues
sum(alphaValues)
sum(valores)
valores
sum(valores)
sum(valores)
index_high_t
index_high_t[1]
which(index_high_t)
which(index_high_t)[1]
which
witch
which
which(index_high_t)[1]
which(index_high_t)
which(index_low_t)
which(index_low_t)[-1]
which(index_low_t)[last]
tail(index_low_t)
tail(index_low_t,1)
runApp()
tail(which(index_low_t),1)
runApp()
tail(which(index_low_t),1)
runApp()
tail(which(index_low_t),1)
runApp()
runApp()
x=seq(0,30,length=1000)
valores = dchisq(x,gl)
gl=20
valores = dchisq(x,gl)
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.4))
gl=10
valores = dchisq(x,gl)
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.4))
gl=50
x=seq(0,30+gl,length=1000)
valores = dchisq(x,gl)
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.4))
gl=5
x=seq(0,30+gl,length=1000)
valores = dchisq(x,gl)
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.4))
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.3))
plot(x,valores,lwd=2,type = "l",ylim = c(0,0.2))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x=seq(-5,5,length=11)
x
?dnorm
pnorm(0)
pnorm(3)
pnorm(-5)
pnorm(-1)
pnorm(-2)
pnorm(-2)-prnom(-1)
pnorm(-2)-pnorm(-1)
pnorm(-1)-pnorm(-2)
x
pnorm(x)
pnorm(x[2:])
shiny::runApp()
