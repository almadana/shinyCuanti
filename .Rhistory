runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?row
?column
runApp()
runApp()
runApp()
runApp()
runApp()
?fixedRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(encuesta)
View(encuesta1)
a=unlist(lapply(encuesta1,class))
b=(lapply(encuesta1,levels))
numericas=unlist(lapply(b,is.null))
a
b
b
numericas
list(ä,b,numericas)
a=unlist(lapply(encuesta1,class))
b=(lapply(encuesta1,levels))
numericas=unlist(lapply(b,is.null))
a
list(ä,b,numericas)
list(a,b,numericas)
a
encuesta1$Escala.satisfaccion.vida
View(encuesta1$Escala.satisfaccion.vida)
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(select(contains("ESV"))))
library(dplyr)
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(select(contains("ESV"))))
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta %>%  mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta=read.csv("./data/encuestaCuanti.csv")
head(encuesta)
colnames(encuesta)=c("timestamp","Sexo","Edad","Dep.residencia","Barrio.vive","Liceo","Trabaja","Salario","Edad.meses","ESV1","ESV2","ESV3","ESV4","ESV5","N.Personas.vive","Horas.sueño","ud.es")
levels(encuesta$Sexo)=c("Varón","Mujer","Otra@")
levels(encuesta$Liceo)=c("Público","Privado")
levels(encuesta$Trabaja)=c("Sí","No","Ns/nc")
levels(encuesta$Salario)=c("Sin salario","Entre 1 y 4.999","Entre 5.000 y 9.999","Entre 10.000 y 29.999","Más de 30.000","Ns/nc")
levels(encuesta$Horas.sueño)
encuesta$RangoEdad=sapply(encuesta$Edad,function(x) {ifelse(x<25,"Menos de 25 años",ifelse(x<30, "Entre 26 y 30 años",ifelse(x<35,"Entre 31 y 34 años", "35 años o más" ) ) )})
encuesta$horas.sueño.hms = hms(encuesta$Horas.sueño)
horaMal = (encuesta$horas.sueño.hms < hms("2:00:00")) | (encuesta$horas.sueño.hms > hms("15:00:00"))
sum(horaMal)
encuesta = encuesta[!horaMal,]
encuesta$horas.sueño=round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2) # pasar a segundos, luego a horas, y luego redondear resultado
encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta =encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
colnames(encuesta)
encuesta1=encuesta[,c(2,3,4,6,7,8,15,18,20,21)]
table(encuesta1$RangoEdad,encuesta1$Trabaja)
save(encuesta1,file="./data/encuesta.RData")
runApp()
load('./data/encuesta.RData')
a=unlist(lapply(encuesta1,class))
a
b=(lapply(encuesta1,levels))
b
numericas=unlist(lapply(b,is.null))
numericas
encuesta1$RangoEdad
encuesta=read.csv("./data/encuestaCuanti.csv")
head(encuesta)
colnames(encuesta)=c("timestamp","Sexo","Edad","Dep.residencia","Barrio.vive","Liceo","Trabaja","Salario","Edad.meses","ESV1","ESV2","ESV3","ESV4","ESV5","N.Personas.vive","Horas.sueño","ud.es")
levels(encuesta$Sexo)=c("Varón","Mujer","Otra@")
levels(encuesta$Liceo)=c("Público","Privado")
levels(encuesta$Trabaja)=c("Sí","No","Ns/nc")
levels(encuesta$Salario)=c("Sin salario","Entre 1 y 4.999","Entre 5.000 y 9.999","Entre 10.000 y 29.999","Más de 30.000","Ns/nc")
levels(encuesta$Horas.sueño)
encuesta$RangoEdad=sapply(encuesta$Edad,function(x) {ifelse(x<25,"Menos de 25 años",ifelse(x<30, "Entre 26 y 30 años",ifelse(x<35,"Entre 31 y 34 años", "35 años o más" ) ) )})
encuesta$RangoEdad = factor(encuesta$RangoEdad)
encuesta$horas.sueño.hms = hms(encuesta$Horas.sueño)
horaMal = (encuesta$horas.sueño.hms < hms("2:00:00")) | (encuesta$horas.sueño.hms > hms("15:00:00"))
sum(horaMal)
encuesta = encuesta[!horaMal,]
encuesta$horas.sueño=round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2) # pasar a segundos, luego a horas, y luego redondear resultado
encuesta =encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
colnames(encuesta)
encuesta1=encuesta[,c(2,3,4,6,7,8,15,18,20,21)]
table(encuesta1$RangoEdad,encuesta1$Trabaja)
save(encuesta1,file="./data/encuesta.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("asdf",4,"sdaf")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
updateCheckboxInput()
?updateCheckboxInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
randoperm(40)
randperm(40)
sample(1:100,10)
sample(100,10)
runApp()
runApp()
runApp()
runApp()
runApp()
13/0
13/134
100*13/134
100*50/134
13/(134*100)
13/100
13/100*134
50/100*134
runApp()
runApp()
runApp()
library(GAlogger)
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("uuid")
runApp()
?ga_set_tracking_id
?galogger
?ga_collect_pageview
?ga_set_approval
ga_set_user_id()
?ga_set_user_id()
runApp()
runApp()
runApp()
?ga_collect_event
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?dnorm
dnorm(1,0,1)
dnorm(1)
dnorm(.05)
dnorm(0)
dnorm(100)
dnorm(50)
dnorm(1)
dnorm(2)
dnorm(0:1,)
dnorm(0:1)
0:1:.1
0:.1:1
# Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
?curve
curve(dnorm(x))
curve(dnorm(x),-2,2)
curve(dnorm,-2,2)
curve(dnorm(x,1,2),-2,2)
curve(dnorm(x,-1,2),-2,2)
bins
a=c(1,2,3)
a[1]
a[:]
a[-1]
a[-2]
a[1]
a[length(a)]
runApp()
# Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
a= plot(function(x) dnorm(x, log = TRUE), -60, 50,
+      main = "log { Normal density }")
x=dt$Psicopatia_SD3
x
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = input$bins + 1)
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), 6)
bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
x
bins
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = 6)
bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
curve(dnorm(x,m,s),bins[1],bins[length(bins)])
m=mean(x)
s=sd(x)
curve(dnorm(x,m,s),bins[1],bins[length(bins)])
curve(dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
curve(dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
sum(x)
a=sum(x)
curve(a*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/2*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/10*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
breaks
bins
curve(a/6*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = 15)
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
m=mean(x)
s=sd(x)
curve(a/length(bins)*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/(length(bins)-1)*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
save(miniBase,file="./data/miniBase.RData")
shiny::runApp()
miniBase
miniBase
head(miniBase)
save(miniBase,file="./data/miniBase.RData")
runApp()
miniBase
levels(miniBase$Edad)
class(miniBase$Edad)
miniBase$Edad
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
save(miniBase,file="./data/miniBase.RData")
runApp()
library(foreign)
library(dplyr)
library(haven)
library(lubridate)
miniBase = read.csv("../minibase.csv",dec=",")
head(miniBase)
library(ggplot2)
library(dplyr)
music = read.csv(file = "Mehr Song and Spelke 2016 Experiment 1.csv")
music = read.csv(file = "../data/musicBabies/Mehr Song and Spelke 2016 Experiment 1.csv")
View(music)
View(music1)
music = read.csv(file = "../data/musicBabies/Mehr Song and Spelke 2016 Experiment 1.csv")
View(music)
music1 = music %>%
filter(exp1==1) %>%
select("id","female","dad","Baseline_Proportion_Gaze_to_Singer","Test_Proportion_Gaze_to_Singer","Difference_in_Proportion_Looking","age","Estimated_Total_Number_of_Song")
View(music1)
colnames(music1)
library(haven)
?haven
??haven
attributes(music1$Baseline_Proportion_Gaze_to_Singer)
attributes(music1$Baseline_Proportion_Gaze_to_Singer)$label
attributes(music1$Baseline_Proportion_Gaze_to_Singer)$label = "d"
attributes(music1$Baseline_Proportion_Gaze_to_Singer)$label
music1$Baseline_Proportion_Gaze_to_Singer
colnames(music1) = c("Id","Mujer","Vino.con.el.padre","Prop.Mirada.Canta.Base","Prop.Mirada.Canta.Test","Dif.Prop.Mirada","edad","Num.canc.estim")
attributes(music1[1])
attributes(music1[1])$label
attributes(music1[1])$label = "Identificador del bebé"
attributes(music1[2])$label = "Es mujer?  Sí:1  No:0"
attributes(music1[3])$label = "¿Vino con el padre? Sí:1  No:0"
attributes(music1[4])$label = "Proporción de tiempo que mira a quien (luego) canta la canción conocida. Línea de base"
attributes(music1[5])$label = "Proporción de tiempo que mira a quien canta la canción conocida. Test."
attributes(music1[6])$label = "Diferencia en la proporción de tiempo que mira a quien canta la canción conocida, Test menos línea de base."
attributes(music1[7])$label = "Edad en meses"
attributes(music1[8])$label = "Número estimado de veces que el bebé escuchó la canción de parte de sus cuidadores."
save(music1,file="./data/expeCuna.RData")
load("./data/expeCuna.RData")
shiny::runApp()
music1
attributes(music1$Mujer)$label
attributes(music1$Mujer)$label
attributes(music1[1])$label = "Identificador del bebé"
attributes(music1[1])$label
attributes(music1$Id)$label
attributes(music1$Id)$label = "id"
attributes(music1$Id)$label
attributes(music1$Id)$label = "Identificador del bebé"
attributes(music1$Mujer)$label = "Es mujer?  Sí:1  No:0"
attributes(music1$Vino.con.el.padre)$label = "¿Vino con el padre? Sí:1  No:0"
attributes(music1$Prop.Mirada.Canta.Base)$label = "Proporción de tiempo que mira a quien (luego) canta la canción conocida. Línea de base"
attributes(music1$Prop.Mirada.Canta.Test)$label = "Proporción de tiempo que mira a quien canta la canción conocida. Test."
attributes(music1$Dif.Prop.Mirada)$label = "Diferencia en la proporción de tiempo que mira a quien canta la canción conocida, Test menos línea de base."
attributes(music1$edad)$label = "Edad en meses"
attributes(music1$Num.canc.estim)$label = "Número estimado de veces que el bebé escuchó la canción de parte de sus cuidadores."
save(music1,file="./data/expeCuna.RData")
runApp()
music1$Mujer
music1$Mujer = as.factor(music1$Mujer)
levels(music1$Mujer)
music1$Mujer = as.factor(music1$Mujer,label=c("No","Si"))
music = read.csv(file = "../data/musicBabies/Mehr Song and Spelke 2016 Experiment 1.csv")
music1 = music %>%
filter(exp1==1) %>%
select("id","female","dad","Baseline_Proportion_Gaze_to_Singer","Test_Proportion_Gaze_to_Singer","Difference_in_Proportion_Looking","age","Estimated_Total_Number_of_Song")
colnames(music1)
colnames(music1) = c("Id","Mujer","Vino.con.el.padre","Prop.Mirada.Canta.Base","Prop.Mirada.Canta.Test","Dif.Prop.Mirada","edad","Num.canc.estim")
attributes(music1$Id)$label = "Identificador del bebé"
attributes(music1$Mujer)$label = "Es mujer?"
attributes(music1$Vino.con.el.padre)$label = "¿Vino con el padre?"
attributes(music1$Prop.Mirada.Canta.Base)$label = "Proporción de tiempo que mira a quien (luego) canta la canción conocida. Línea de base"
attributes(music1$Prop.Mirada.Canta.Test)$label = "Proporción de tiempo que mira a quien canta la canción conocida. Test."
attributes(music1$Dif.Prop.Mirada)$label = "Diferencia en la proporción de tiempo que mira a quien canta la canción conocida, Test menos línea de base."
attributes(music1$edad)$label = "Edad en meses"
attributes(music1$Num.canc.estim)$label = "Número estimado de veces que el bebé escuchó la canción de parte de sus cuidadores."
music1$Mujer = factor(music1$Mujer,labels = c("No","Si"))
View(music)
colnames(music1) = c("Id","Es.mujer","Vino.con.el.padre","Prop.Mirada.Canta.Base","Prop.Mirada.Canta.Test","Dif.Prop.Mirada","edad","Num.canc.estim")
factor(music1$Vino.con.el.padre,labels = c("No","Si"))
music1$Vino.con.el.padre =  factor(music1$Vino.con.el.padre,labels = c("No","Si"))
save(music1,file="./data/expeCuna.RData")
runApp()
?Tag
?tag
cor(x,y)
cor(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3
)
paste("a",cor(dt$Veces_entra_FBIG_XDIA,dt$Narcicismo_SD3))
cor.test(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3
)
a=cor.test(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3)
a$p.value
cor.test(dt$Veces_entra_FBIG_XDIA,dt$Maquiavelismo_SD3)$p.value
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("El p-valor de la prueba de hipótesis (nula r=0) es : ",round(cor.test(dt$Veces_entra_FBIG_XDIA,dt$Psicopatia_SD3)$p.value,4))
runApp()
runApp()
runApp()
boxplot(dt$Maquiavelismo_SD3,main=paste("Diagrama de caja de"))
abline(h=mean(dt$Maquiavelismo_SD3))
boxplot(dt$Maquiavelismo_SD3,dt$Psicopatia_SD3,main=paste("Diagrama de caja de"))
abline(h=mean(dt$Maquiavelismo_SD3))
?abline
boxplot(dt$Maquiavelismo_SD3,dt$Psicopatia_SD3,main=paste("Diagrama de caja de"))
abline(h=mean(dt$Maquiavelismo_SD3),v=1)
boxplot(dt$Maquiavelismo_SD3,dt$Psicopatia_SD3,main=paste("Diagrama de caja de"))
segments(1,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3))
segments(1,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3),col="red")
segments(.5,mean(dt$Maquiavelismo_SD3),1.5,mean(dt$Maquiavelismo_SD3),col="red")
segments(.7,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3),col="red")
segments(.7,mean(dt$Maquiavelismo_SD3),1.3,mean(dt$Maquiavelismo_SD3),col="blue")
segments(.6,mean(dt$Maquiavelismo_SD3),1.4,mean(dt$Maquiavelismo_SD3),col="blue")
?tapply
mxy = tapply(dt$Narcicismo_SD3,dt$Sexo,function(x) mean(x,na.rm = T))
mx
mxy
boxplot(Narcicismo_SD3~Sexo,data=dt,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
boxplot(Narcicismo_SD3~Sexo,data=dt,main="Diagrama de caja")
points(mxy,col="red")
segments(mxy,col="red")
s=seq(length(Sexo)-1)
s=seq(length(dt$Sexo)-1)
s
s
s=seq(1:2)
s
mxy
mxy[s]
x
xcoords=x
xcoords=s
xcoords=s-0.4
xcoords1=s+.6
xcoords
s=2
xcoords=s-.4
xcoords1=s+.4
xcoords
xords1
xcoords
s
s=1:2
s
s=1:2
xcoords=s-.4
xcoords
xccoords1=s+.4
xcoords1
xcooords1
xccoords1
mxy
segments(xcoords,xccoords1,mxy)
segments(xcoords,xccoords1,mxy,col="red")
xcoords1
xccoords1
boxplot(Narcicismo_SD3~Sexo,data=dt,main="Diagrama de caja")
segments(xcoords,xccoords1,mxy,col="red")
mxy
segments
?segments
s
segments(xcoords[s],mxy[s],xccoords1[s],mxy[s],col="red")
segments(xcoords[s],mxy[s],xccoords1[s],mxy[s],col="red",lwd=2)
runApp()
