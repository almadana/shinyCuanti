attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
save(wealth3,file="./data/wealth.RData")
runApp()
inteli = read_sav("../data/inteligencia/alldata/Study1 data.sav")
runApp()
runApp()
wealth3=complete.cases(wealth3)
save(wealth3,file="./data/wealth.RData")
runApp()
runApp()
wealth3
wealth3 = wealth2 %>%
select("PS","Household_Income","Population_Inequality_Gini_Index","Social_Circle_Inequality_Gini_Index","f_s","redist","income3tile","political3tile")
colnames(wealth3)
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Orientacion_politica")
wealth3$Tercil_ingreso_hogar = factor(wealth3$Tercil_ingreso_hogar,labels=c("Menor","Medio","Mayor"))
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
wealth3=wealth3[complete.cases(wealth3),]
save(wealth3,file="./data/wealth.RData")
runApp()
shiny::runApp()
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
wealth3$Tercil_orientacion_politica
colnames(wealth2)
wealth3 = wealth2 %>%
select("PS","Household_Income","Population_Inequality_Gini_Index","Social_Circle_Inequality_Gini_Index","f_s","redist","income3tile","political3tile")
colnames(wealth3)
colnames(wealth3) = c("Sujeto","Ingreso.hogar","Gini_estimado_poblacion","Gini_estimado_circ.social","Igualdad_y_satisfaccion","Redistribucion","Tercil_ingreso_hogar","Orientacion_politica")
wealth3$Tercil_ingreso_hogar = factor(wealth3$Tercil_ingreso_hogar,labels=c("Menor","Medio","Mayor"))
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
wealth3$Orientacion_politica
wealth3$Tercil_ingreso_hogar
wealth3$Tercil_orientacion_politica = factor(wealth3$Tercil_orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
wealth3$Tercil_orientacion_politica
wealth3$Tercil_ingreso_hogar
wealth3$Tercil_orientacion_politica
wealth3$Orientacion_politica = factor(wealth3$Orientacion_politica,labels=c("Liberal-Izq","Centro","Conservador-Der"))
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Sujeto)$label="Número de participante"
attributes(wealth3$Ingreso.hogar)$label="Ingreso al hogar"
attributes(wealth3$Gini_estimado_poblacion)$label="Índice gini de la estimación de distribución de ingreso al hogar en la población de los EEUU"
attributes(wealth3$Gini_estimado_circ.social)$label="Índice gini de la estimación de distribución de ingreso al hogar en el círculo social del participante"
attributes(wealth3$Igualdad_y_satisfaccion)$label="Puntuación en la escala de percepción de justicia y satisfacción con la distribución de ingreso actual"
attributes(wealth3$Redistribucion)$label="Puntuación en la escala de acuerdo con la afirmación 'Creo que el estado debería redistribuir la riqueza a través de impuestos a los más ricos'"
attributes(wealth3$Tercil_ingreso_hogar)$label = "Nivel de ingreso al hogar (por debajo del primer tercil, entre el primer y segundo tercil, por encima del tercer tercil)"
attributes(wealth3$Orientacion_politica)$label = "Orientación política (liberal de izquierda, centro, conservador de derecha)"
wealth3=wealth3[complete.cases(wealth3),]
save(wealth3,file="./data/wealth.RData")
runApp()
chisq(dt$Sexo,dt$Lugar_procedencia)
chisq.test(dt$Sexo,dt$Lugar_procedencia)
a=chisq.test(dt$Sexo,dt$Lugar_procedencia)
a$statistic
a$p.value
a$parameter
runApp()
runApp()
runApp()
runApp()
t.test(dt$Veces_entra_FBIG_XDIA)
t.test(dt$Veces_entra_FBIG_XDIA,dt$Narcicismo_SD3)
t.test(dt$Veces_entra_FBIG_XDIA~dt$Sexo)
a
a[[1]]
a=1
a[[1]]
a
a=t.test(dt$Veces_entra_FBIG_XDIA~dt$Sexo)
a
a$statistic
ifelse(T,"","DF")
ifelse(F,"","DF")
ifelse(F,"DF")
ifelse(F,"","DF")
runApp()
runApp()
70/69
70/69*3.34
69/70*3.34
sqrt(69/70)*3.34
70/69*3.34
sqrt(69/70)*1.83
70/69*1.83
dt$Veces_entra_FBIG_XDIA
sdd=sd(dt$Veces_entra_FBIG_XDIA)
sdd
sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))
plotci
plot(mean(dt$Veces_entra_FBIG_XDIA))
segments(x0 = 1,x1 = 1, y0=mean(dt$Veces_entra_FBIG_XDIA-sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),y0=mean(dt$Veces_entra_FBIG_XDIA+sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))))
segments(x0 = 1,x1 = 1, y0=mean(dt$Veces_entra_FBIG_XDIA-sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),y1=mean(dt$Veces_entra_FBIG_XDIA+sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))))
segments(x0 = 1,x1 = 1, y0=mean(dt$Veces_entra_FBIG_XDIA-sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),y1=mean(dt$Veces_entra_FBIG_XDIA+sdd/sqrt(length(dt$Veces_entra_FBIG_XDIA))),"red")
shiny::runApp()
runApp()
runApp()
x=dt$Veces_entra_FBIG_XDIA
mx=mean(x,na.rm=T)
sdx = sd(x,na.rm = T)
sex = sdx/sqrt(length(x))
print(sex)
nombre=""
plot(mx,main=paste("Intervalo de confianza de 68% para la media de",nombre))
segments(x0=1,y0=mx-multiplicador*sex,x1=1,y1=1+multiplicador*sex,col="red")
multiplicador=1
segments(x0=1,y0=mx-multiplicador*sex,x1=1,y1=1+multiplicador*sex,col="red")
mx
mx-sex
mx-multiplicador*sex
segments(x0=1,y0=mx-multiplicador*sex,x1=1,y1=1+multiplicador*sex,col="red")
(mx-multiplicador*sex)
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=1+multiplicador*sex,col="red")
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=(1+multiplicador*sex),col="red")
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=(mx+multiplicador*sex),col="red")
runApp()
y=dt$Narcicismo_SD3
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
mxy
y=dt$Sexo
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
mxy
sexy = tapply(x,y,function(x) sd(x,na.rm = T)/sqrt(length(x)))
sexy
plot(c(mx,my))
my=mean(y)
my=mean(y,na.rm = T)
my
y
y=dt$Maquiavelismo_SD3
my=mean(y,na.rm = T)
my
plot(c(mx,my))
segments(x0=1,y0=(mx-multiplicador*sex),x1=1,y1=(mx+multiplicador*sex),col="red")
segments(x0=2,y0=(my-multiplicador*sey),x1=2,y1=(my+multiplicador*sey),col="red")
sdy = sd(y,na.rm = T)
sey = sdy/sqrt(length(y))
segments(x0=2,y0=(my-multiplicador*sey),x1=2,y1=(my+multiplicador*sey),col="red")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
y
y=dt$Sexo
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
sexy = tapply(x,y,function(x) sd(x,na.rm = T)/sqrt(length(x)))
mxy
sexy
ycoords0 = mxy - multiplicador*sexy
ycoords1 = mxy + multiplicador*sexy
ycoords0
ycoords1
s
xcoords=1:length(unique(y))
scoords
xcoords
uppery
lowery = min(mxy-2*multiplicador*sexy)
uppery = max(mxy+2*multiplicador*sexy)
uppery
lowery
xcoords
s
xcoords
s
xcoords[s]
mxy[s]
ycoords0
shiny::runApp()
1:s
s
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Only run this example in interactive R sessions
if (interactive()) {
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
## App 2: Using `once`
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
}
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
runApp()
runApp()
runApp()
runApp()
1:4-3
pairwise.t.test(dt$Narcicismo_SD3,dt$Sexo)
pairwise.t.test(dt$Narcicismo_SD3,dt$Lugar_procedencia)
a=pairwise.t.test(dt$Narcicismo_SD3,dt$Lugar_procedencia)
a$p.value
a$method
a$data.name
a$p.adjust.method
a=pairwise.t.test(dt$Narcicismo_SD3,dt$Lugar_procedencia,adjust="none")
a
a$data.name
labels(a$p.value)
levels(dt$Lugar_procedencia)
a
levels(dt$Lugar_procedencia)
a
a[1,1]
a[1]
a
a$p.value[1]
a$p.value[1,]
a$p.value[1,1]
a$p.value[1,2]
a$p.value[2,1]
runApp()
x
y
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i+1):(niveles)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
niveles
niveles=length(unique(y))
niveles
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i+1):(niveles)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
j
i
a
niveles=length(unique(y))
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i+1):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
j
i
runApp()
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
texto
niveles
etiquetas=unique(y)
etiquetas
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
texto
i
j
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,niveles[i]," --",niveles[j],":",a[j,i],"\n")
}
}
texto
texto = "Los p-valores de los contraste de medias son: \n"
for (i in 1:(niveles-1)) {
for (j in (i):(niveles-1)) {
texto = paste(texto,etiquetas[i]," --",etiquetas[j],":",a[j,i],"\n")
}
}
texgto
texto
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
etiquetqas
i=1
y
y=dt$Lugar_procedencia
niveles=length(unique(y))
etiquetas=unique(y)
a=pairwise.t.test(x,y)$p.value
texto = "Los p-valores de los contraste de medias son: \n"
i=1
j=1
a[j,i]
a
a=pairwise.t.test(x,y)$p.value
a
a[j,i]
a
etiquetas
etiquetas=levels(as.factor(y))
etiquetqas
etiquetas
runApp()
runApp()
runApp()
runApp()
y
x
x=dt$Maquiavelismo_SD3
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja")
nombre1="Maquiavelismo_SD3"
nombre2="Sexo"
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja")
meanOffset = .45
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(,main="Diagrama de caja")
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(x~y,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
nombre1="Maquiavelismo"
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(x~y,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
segments(xcoords[s],mxy[s],xcoords1[s],mxy[s],col="red",lwd=2,lty=2)
mtext("La líneas cortadas indican la media",1)
mtext("La líneas cortadas indican la media",1)
meanOffset = .5
mxy = tapply(x,y,function(x) mean(x,na.rm=T))
s=1:length(unique(y))
xcoords=s-meanOffset
xcoords1=s+meanOffset
boxplot(x~y,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
segments(xcoords[s],mxy[s],xcoords1[s],mxy[s],col="red",lwd=2,lty=2)
mtext("La líneas cortadas indican la media",1)
