getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#determina qué gráfica, tabla o análisis a mostrar
#funciones de gráficas
hacerHistograma = function() {
#print(data())
x = data()[[1]]
nombre = data()[[3]]
# generate bins based on input$bins from ui.R
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
titulo = paste("Histograma de",input$var1)
#print(x)
#print(is.numeric(x))
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
}
hacerDispersion = function() {
x = data()[[1]]
y = data()[[2]]
nombre.x = data()[[3]]
nombre.y = data()[[4]]
pointSize = input$pointSize
# draw the histogram with the specified number of bins
#titulo = paste("Histograma de",input$var1)
plot(x, y,cex = pointSize,xlab = nombre.x,ylab=nombre.y,main="")
}
hacerGrafBarras = function() {
if (input$var2==input$var1) {
nombre=data()[[3]]
barplot(table(data()[[1]]),main=nombre)
}
else {
nombre1=data()[[3]]
nombre2=data()[[4]]
#print(nombre2)
tab=table(data()[[1]],data()[[2]])
if (input$freq=="porcentuales") {
tab=prop.table(tab,2)
tab=tab*100
}
barplot(tab,beside = input$stacked!="apiladas",xlab = nombre2)
position=switch(input$leyenda,"izquierda"="topleft","derecha"="topright")
legend(position,levels(data()[[1]]),fill=gray.colors(length(levels(data()[[1]]))))
title(paste("Gráfico de",nombre1,"según",nombre2))
#qplot(dt,aes_string(x=a,fill=b))+geom_bar(stat="identity",position = position_dodge())
}
}
hacerBoxplot= function() {
if (input$var2==input$var1) {
nombre=data()[[3]]
boxplot(data()[[1]],main=paste("Diagrama de caja de",nombre))
}
else {
datos=data()[[6]]
nombre1=data()[[3]]
nombre2=data()[[4]]
#print(nombre2)
boxplot(formula(paste(nombre1,nombre2,sep="~")),data=datos,main="Diagrama de caja",xlab=nombre2,ylab=nombre1)
}
}
#verDataFrame
output$dataframe <- renderDataTable({
# print("Bingo!")
#print(str(data()[[6]]))
# print(data()[[6]])
data()[[6]]
},searchDelay = 600)
output$laTabla <- renderUI({
HTML(limpiaColspan(funcionDeTabla()()))
})
limpiaColspan <- function(x) {
gsub("td colspan='[0-9]*'","td colspan='1'",x)
}
noPlot <- function(){}
output$elPlot <- renderPlot({
funcionDePloteo()()
})
# output$mensaje <- renderText({
#   paste("Que pasa: !",input$analisis)
# })
})
lapply(b,function(x) {if (nchar(x)<50) {        x=paste(substr(x,0,50),"...",sep="") } )
lapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
})
sapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
})
tapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
})
sapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
})
?apply
?sapply
vapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
})
sapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
})
sapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
},simplify = "array")
sapply(b,function(x) {
if (nchar(x)<50) {
x=paste(substr(x,0,50),"...",sep="") }
},USE.NAMES = F)
runApp()
runApp()
runApp()
View(encuesta1)
encuesta
encuesta1
levels(encuesta$Horas.sueño)
library(lubridate)
hms(encuesta$Horas.sueño)
encuesta$horas.sueño.hms = hms(encuesta$Horas.sueño)
hms("2:00")
hms("2:00:00")
encuesta$horas.sueño.hms < hms("2:00:00")
encuesta$Horas.sueño
encuesta$horas.sueño.hms
View(encuesta)
sum(encuesta$horas.sueño.hms < hms("2:00:00"))
as.double(encuesta$horas.sueño.hms)
minutes(encuesta$horas.sueño.hms)
as.double(minutes(encuesta$horas.sueño.hms))
minutes(encuesta$horas.sueño.hms)
hours(encuesta$horas.sueño.hms)
period_to_seconds(encuesta$horas.sueño.hms)
period_to_seconds(encuesta$horas.sueño.hms) / 3600
round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2)
hist(round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2))
horaMal = (encuesta$horas.sueño.hms < hms("2:00:00")) | (encuesta$horas.sueño.hms > hms("15:00:00"))
sum(horaMal)
encuesta = encuesta[!horaMal]
encuesta = encuesta[!horaMal,]
encuesta$horas.sueño=round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2)
colnames(encuesta)
encuesta %>% select(contains("EV")) %>%  head()
library(dplyr)
encuesta %>% select(contains("EV")) %>%  head()
encuesta %>% select(contains("ESV")) %>%  head()
encuesta %>% select(contains("ESV")) %>%
summarise_all(sum)
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(.))
encuesta %>% select(contains("ESV")) %>%
summarize(Escala.satisfaccion.vida = rowSums(.))
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(.))
encuesta %>% select(contains("ESV")) %>%
transmute(Escala.satisfaccion.vida = rowSums(.))
encuesta$Escala.satisfaccion.vida = encuesta %>% select(contains("ESV")) %>%
transmute(Escala.satisfaccion.vida = rowSums(.))
colnames(encuesta)
encuesta1=encuesta[,c(2,3,4,6,7,8,15,18,20,21)]
table(encuesta1$RangoEdad,encuesta1$Trabaja)
save(encuesta,file="./data/encuesta.RData")
save(encuesta1,file="./data/encuesta.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?row
?column
runApp()
runApp()
runApp()
runApp()
runApp()
?fixedRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(encuesta)
View(encuesta1)
a=unlist(lapply(encuesta1,class))
b=(lapply(encuesta1,levels))
numericas=unlist(lapply(b,is.null))
a
b
b
numericas
list(ä,b,numericas)
a=unlist(lapply(encuesta1,class))
b=(lapply(encuesta1,levels))
numericas=unlist(lapply(b,is.null))
a
list(ä,b,numericas)
list(a,b,numericas)
a
encuesta1$Escala.satisfaccion.vida
View(encuesta1$Escala.satisfaccion.vida)
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(select(contains("ESV"))))
library(dplyr)
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(select(contains("ESV"))))
encuesta %>% select(contains("ESV")) %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta %>%  mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta=read.csv("./data/encuestaCuanti.csv")
head(encuesta)
colnames(encuesta)=c("timestamp","Sexo","Edad","Dep.residencia","Barrio.vive","Liceo","Trabaja","Salario","Edad.meses","ESV1","ESV2","ESV3","ESV4","ESV5","N.Personas.vive","Horas.sueño","ud.es")
levels(encuesta$Sexo)=c("Varón","Mujer","Otra@")
levels(encuesta$Liceo)=c("Público","Privado")
levels(encuesta$Trabaja)=c("Sí","No","Ns/nc")
levels(encuesta$Salario)=c("Sin salario","Entre 1 y 4.999","Entre 5.000 y 9.999","Entre 10.000 y 29.999","Más de 30.000","Ns/nc")
levels(encuesta$Horas.sueño)
encuesta$RangoEdad=sapply(encuesta$Edad,function(x) {ifelse(x<25,"Menos de 25 años",ifelse(x<30, "Entre 26 y 30 años",ifelse(x<35,"Entre 31 y 34 años", "35 años o más" ) ) )})
encuesta$horas.sueño.hms = hms(encuesta$Horas.sueño)
horaMal = (encuesta$horas.sueño.hms < hms("2:00:00")) | (encuesta$horas.sueño.hms > hms("15:00:00"))
sum(horaMal)
encuesta = encuesta[!horaMal,]
encuesta$horas.sueño=round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2) # pasar a segundos, luego a horas, y luego redondear resultado
encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
encuesta =encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
colnames(encuesta)
encuesta1=encuesta[,c(2,3,4,6,7,8,15,18,20,21)]
table(encuesta1$RangoEdad,encuesta1$Trabaja)
save(encuesta1,file="./data/encuesta.RData")
runApp()
load('./data/encuesta.RData')
a=unlist(lapply(encuesta1,class))
a
b=(lapply(encuesta1,levels))
b
numericas=unlist(lapply(b,is.null))
numericas
encuesta1$RangoEdad
encuesta=read.csv("./data/encuestaCuanti.csv")
head(encuesta)
colnames(encuesta)=c("timestamp","Sexo","Edad","Dep.residencia","Barrio.vive","Liceo","Trabaja","Salario","Edad.meses","ESV1","ESV2","ESV3","ESV4","ESV5","N.Personas.vive","Horas.sueño","ud.es")
levels(encuesta$Sexo)=c("Varón","Mujer","Otra@")
levels(encuesta$Liceo)=c("Público","Privado")
levels(encuesta$Trabaja)=c("Sí","No","Ns/nc")
levels(encuesta$Salario)=c("Sin salario","Entre 1 y 4.999","Entre 5.000 y 9.999","Entre 10.000 y 29.999","Más de 30.000","Ns/nc")
levels(encuesta$Horas.sueño)
encuesta$RangoEdad=sapply(encuesta$Edad,function(x) {ifelse(x<25,"Menos de 25 años",ifelse(x<30, "Entre 26 y 30 años",ifelse(x<35,"Entre 31 y 34 años", "35 años o más" ) ) )})
encuesta$RangoEdad = factor(encuesta$RangoEdad)
encuesta$horas.sueño.hms = hms(encuesta$Horas.sueño)
horaMal = (encuesta$horas.sueño.hms < hms("2:00:00")) | (encuesta$horas.sueño.hms > hms("15:00:00"))
sum(horaMal)
encuesta = encuesta[!horaMal,]
encuesta$horas.sueño=round ( period_to_seconds(encuesta$horas.sueño.hms) / 3600 , 2) # pasar a segundos, luego a horas, y luego redondear resultado
encuesta =encuesta %>%
mutate(Escala.satisfaccion.vida = rowSums(select(.,contains("ESV"))) )
colnames(encuesta)
encuesta1=encuesta[,c(2,3,4,6,7,8,15,18,20,21)]
table(encuesta1$RangoEdad,encuesta1$Trabaja)
save(encuesta1,file="./data/encuesta.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("asdf",4,"sdaf")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
updateCheckboxInput()
?updateCheckboxInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
randoperm(40)
randperm(40)
sample(1:100,10)
sample(100,10)
runApp()
runApp()
runApp()
runApp()
runApp()
13/0
13/134
100*13/134
100*50/134
13/(134*100)
13/100
13/100*134
50/100*134
runApp()
runApp()
runApp()
library(GAlogger)
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("uuid")
runApp()
?ga_set_tracking_id
?galogger
?ga_collect_pageview
?ga_set_approval
ga_set_user_id()
?ga_set_user_id()
runApp()
runApp()
runApp()
?ga_collect_event
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?dnorm
dnorm(1,0,1)
dnorm(1)
dnorm(.05)
dnorm(0)
dnorm(100)
dnorm(50)
dnorm(1)
dnorm(2)
dnorm(0:1,)
dnorm(0:1)
0:1:.1
0:.1:1
# Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
?curve
curve(dnorm(x))
curve(dnorm(x),-2,2)
curve(dnorm,-2,2)
curve(dnorm(x,1,2),-2,2)
curve(dnorm(x,-1,2),-2,2)
bins
a=c(1,2,3)
a[1]
a[:]
a[-1]
a[-2]
a[1]
a[length(a)]
runApp()
# Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
a= plot(function(x) dnorm(x, log = TRUE), -60, 50,
+      main = "log { Normal density }")
x=dt$Psicopatia_SD3
x
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = input$bins + 1)
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), 6)
bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
x
bins
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = 6)
bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
curve(dnorm(x,m,s),bins[1],bins[length(bins)])
m=mean(x)
s=sd(x)
curve(dnorm(x,m,s),bins[1],bins[length(bins)])
curve(dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
curve(dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
sum(x)
a=sum(x)
curve(a*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/2*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/10*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
breaks
bins
curve(a/6*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
bins <- seq(min(x,na.rm=T), max(x,na.rm=T), length.out = 15)
hist(x, breaks = bins, col = 'darkgray', border = 'white',xlab = nombre,ylab="Frecuencia",main="Histograma")
hist(x, breaks = bins, col = 'darkgray', border = 'white',ylab="Frecuencia",main="Histograma")
m=mean(x)
s=sd(x)
curve(a/length(bins)*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
curve(a/(length(bins)-1)*dnorm(x,m,s),bins[1],bins[length(bins)],add=T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
